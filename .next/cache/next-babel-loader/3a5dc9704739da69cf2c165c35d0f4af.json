{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { AppProvider } from '@shopify/polaris';\nimport { Provider } from '@shopify/app-bridge-react';\nimport '@shopify/polaris/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nimport Cookies from 'js-cookie';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport React from 'react'; //TZIGANIE\n\nvar script = document.createElement(\"script\");\nscript.id = \"widgetbotscript\";\nscript.type = \"text/javascript\";\nscript.src = \"https://cdn.jsdelivr.net/npm/@widgetbot/crate@3\";\nscript.text = \"\\n            var crate = new Crate({\\n                server: '\".concat(valID, \"', \\n                channel: '\").concat(channelID, \"', \\n                location: [\\\"\").concat(desktop ? widgetObj.desktopPosition.yAxis : widgetObj.mobilePosition.yAxis, \"\\\", \\\"\").concat(desktop ? widgetObj.desktopPosition.xAxis : widgetObj.mobilePosition.xAxis, \"\\\"],                                \\n                shard: 'https://e.widgetbot.io',                        \\n                color: '\").concat(widgetObj.color, \"',\\n                defer: true,                        \\n            })\\n            //crate.options.color = '#'+Math.random().toString(16).slice(2, 8);                                \\n            crate.notify({\\n                content: '\").concat(widgetObj.notificationText, \"',\\n                timeout: \").concat(widgetObj.notificationTimeout, \",\\n                avatar: '\").concat(widgetObj.notificationAvatar, \"'                        \\n              }) \\n            \");\nvar client = new ApolloClient({\n  fetchOptions: {\n    credentials: 'include'\n  }\n});\n\nvar MyApp = /*#__PURE__*/function (_App) {\n  _inherits(MyApp, _App);\n\n  var _super = _createSuper(MyApp);\n\n  function MyApp() {\n    _classCallCheck(this, MyApp);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MyApp, [{\n    key: \"render\",\n    // componentDidMount() {\n    //   if (this.state.refreshed) {\n    //     alert(\"MARE RFRESZ QUAESZS\")\n    //     window.location.reload(false);\n    //     this.setState({ refreshed: false })\n    //   }\n    // }\n    value: function render() {\n      var _this$props = this.props,\n          Component = _this$props.Component,\n          pageProps = _this$props.pageProps,\n          shopOrigin = _this$props.shopOrigin; //console.log(shopOrigin)\n\n      if (Cookies.get(\"shopOrigin\") != undefined) {\n        shopOrigin = Cookies.get(\"shopOrigin\"); //console.log(\"---------\")\n        //console.log(\"Il aveam\")\n        //console.log(\"---------\")\n      } else {\n        Cookies.set(\"shopOrigin\", shopOrigin, {\n          httpOnly: false,\n          secure: true,\n          sameSite: 'none'\n        }); //this.setState({ refreshed: true })\n        //console.log(\"---------\")\n        //console.log(\"L-am setat acum\")\n        //console.log(\"---------\")\n      }\n\n      var config = {\n        apiKey: API_KEY,\n        shopOrigin: shopOrigin,\n        forceRedirect: true\n      };\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Discordify\"), __jsx(\"meta\", {\n        charSet: \"utf-8\"\n      })), __jsx(Provider, {\n        config: config\n      }, __jsx(AppProvider, {\n        i18n: translations\n      }, __jsx(ApolloProvider, {\n        client: client\n      }, __jsx(Component, pageProps)))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    // constructor() {\n    //   super()\n    //   this.state = {\n    //     refreshed: false\n    //   }\n    // }\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(server) {\n        var shopOrigin;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                shopOrigin = server.ctx.query.shop;\n                return _context.abrupt(\"return\", {\n                  shopOrigin: shopOrigin\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return MyApp;\n}(App);\n\nexport default MyApp;","map":{"version":3,"sources":["D:/MyProjects/discord-app/pages/_app.js"],"names":["App","Head","AppProvider","Provider","translations","Cookies","ApolloClient","ApolloProvider","React","script","document","createElement","id","type","src","text","valID","channelID","desktop","widgetObj","desktopPosition","yAxis","mobilePosition","xAxis","color","notificationText","notificationTimeout","notificationAvatar","client","fetchOptions","credentials","MyApp","props","Component","pageProps","shopOrigin","get","undefined","set","httpOnly","secure","sameSite","config","apiKey","API_KEY","forceRedirect","server","ctx","query","shop"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAO,6BAAP;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAEAF,MAAM,CAACG,EAAP,GAAY,iBAAZ;AACAH,MAAM,CAACI,IAAP,GAAc,iBAAd;AACAJ,MAAM,CAACK,GAAP,GAAa,iDAAb;AACAL,MAAM,CAACM,IAAP,6EAE2BC,KAF3B,4CAG4BC,SAH5B,+CAI+BC,OAAD,GAAYC,SAAS,CAACC,eAAV,CAA0BC,KAAtC,GAA8CF,SAAS,CAACG,cAAV,CAAyBD,KAJrG,mBAIkHH,OAAD,GAAYC,SAAS,CAACC,eAAV,CAA0BG,KAAtC,GAA8CJ,SAAS,CAACG,cAAV,CAAyBC,KAJxL,qJAM0BJ,SAAS,CAACK,KANpC,8PAW4BL,SAAS,CAACM,gBAXtC,0CAY2BN,SAAS,CAACO,mBAZrC,yCAa2BP,SAAS,CAACQ,kBAbrC;AAiBA,IAAMC,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BuB,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD;AADgB,CAAjB,CAAf;;IAMMC,K;;;;;;;;;;;;;AAcJ;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACDC,SADC,eACDA,SADC;AAAA,UACUC,SADV,eACUA,SADV;AAAA,UACqBC,UADrB,eACqBA,UADrB,EAEP;;AACA,UAAI9B,OAAO,CAAC+B,GAAR,CAAY,YAAZ,KAA6BC,SAAjC,EAA4C;AAC1CF,QAAAA,UAAU,GAAG9B,OAAO,CAAC+B,GAAR,CAAY,YAAZ,CAAb,CAD0C,CAE1C;AACA;AACA;AACD,OALD,MAMK;AACH/B,QAAAA,OAAO,CAACiC,GAAR,CAAY,YAAZ,EAA0BH,UAA1B,EAAsC;AACpCI,UAAAA,QAAQ,EAAE,KAD0B;AAEpCC,UAAAA,MAAM,EAAE,IAF4B;AAGpCC,UAAAA,QAAQ,EAAE;AAH0B,SAAtC,EADG,CAMH;AACA;AACA;AACA;AACD;;AAED,UAAMC,MAAM,GAAG;AAAEC,QAAAA,MAAM,EAAEC,OAAV;AAAmBT,QAAAA,UAAU,EAAVA,UAAnB;AAA+BU,QAAAA,aAAa,EAAE;AAA9C,OAAf;AAEA,aACE,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,IAAD,QACE,kCADF,EAEE;AAAM,QAAA,OAAO,EAAC;AAAd,QAFF,CADF,EAKE,MAAC,QAAD;AAAU,QAAA,MAAM,EAAEH;AAAlB,SACE,MAAC,WAAD;AAAa,QAAA,IAAI,EAAEtC;AAAnB,SACE,MAAC,cAAD;AAAgB,QAAA,MAAM,EAAEwB;AAAxB,SACE,MAAC,SAAD,EAAeM,SAAf,CADF,CADF,CADF,CALF,CADF;AAeD;;;AA1DD;AACA;AACA;AACA;AACA;AACA;;uGAE6BY,M;;;;;;AACvBX,gBAAAA,U,GAAaW,MAAM,CAACC,GAAP,CAAWC,KAAX,CAAiBC,I;iDAC3B;AAAEd,kBAAAA,UAAU,EAAVA;AAAF,iB;;;;;;;;;;;;;;;;;;;EAXSnC,G;;AA+DpB,eAAe+B,KAAf","sourcesContent":["import App from 'next/app';\r\nimport Head from 'next/head';\r\nimport { AppProvider } from '@shopify/polaris';\r\nimport { Provider } from '@shopify/app-bridge-react';\r\nimport '@shopify/polaris/styles.css';\r\nimport translations from '@shopify/polaris/locales/en.json';\r\nimport Cookies from 'js-cookie';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport React from 'react';\r\n\r\n//TZIGANIE\r\nvar script = document.createElement(\"script\");\r\n\r\nscript.id = \"widgetbotscript\"\r\nscript.type = \"text/javascript\";\r\nscript.src = \"https://cdn.jsdelivr.net/npm/@widgetbot/crate@3\";\r\nscript.text = `\r\n            var crate = new Crate({\r\n                server: '${valID}', \r\n                channel: '${channelID}', \r\n                location: [\"${(desktop) ? widgetObj.desktopPosition.yAxis : widgetObj.mobilePosition.yAxis}\", \"${(desktop) ? widgetObj.desktopPosition.xAxis : widgetObj.mobilePosition.xAxis}\"],                                \r\n                shard: 'https://e.widgetbot.io',                        \r\n                color: '${widgetObj.color}',\r\n                defer: true,                        \r\n            })\r\n            //crate.options.color = '#'+Math.random().toString(16).slice(2, 8);                                \r\n            crate.notify({\r\n                content: '${widgetObj.notificationText}',\r\n                timeout: ${widgetObj.notificationTimeout},\r\n                avatar: '${widgetObj.notificationAvatar}'                        \r\n              }) \r\n            `\r\n\r\nconst client = new ApolloClient({\r\n  fetchOptions: {\r\n    credentials: 'include',\r\n  }\r\n});\r\n\r\nclass MyApp extends App {\r\n\r\n  // constructor() {\r\n  //   super()\r\n  //   this.state = {\r\n  //     refreshed: false\r\n  //   }\r\n  // }\r\n\r\n  static async getInitialProps(server) {\r\n    var shopOrigin = server.ctx.query.shop\r\n    return { shopOrigin }\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   if (this.state.refreshed) {\r\n  //     alert(\"MARE RFRESZ QUAESZS\")\r\n  //     window.location.reload(false);\r\n  //     this.setState({ refreshed: false })\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    var { Component, pageProps, shopOrigin } = this.props;\r\n    //console.log(shopOrigin)\r\n    if (Cookies.get(\"shopOrigin\") != undefined) {\r\n      shopOrigin = Cookies.get(\"shopOrigin\")\r\n      //console.log(\"---------\")\r\n      //console.log(\"Il aveam\")\r\n      //console.log(\"---------\")\r\n    }\r\n    else {\r\n      Cookies.set(\"shopOrigin\", shopOrigin, {\r\n        httpOnly: false,\r\n        secure: true,\r\n        sameSite: 'none'\r\n      })\r\n      //this.setState({ refreshed: true })\r\n      //console.log(\"---------\")\r\n      //console.log(\"L-am setat acum\")\r\n      //console.log(\"---------\")\r\n    }\r\n\r\n    const config = { apiKey: API_KEY, shopOrigin, forceRedirect: true };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Head>\r\n          <title>Discordify</title>\r\n          <meta charSet=\"utf-8\" />\r\n        </Head>\r\n        <Provider config={config}>\r\n          <AppProvider i18n={translations}>\r\n            <ApolloProvider client={client}>\r\n              <Component {...pageProps} />\r\n            </ApolloProvider>\r\n          </AppProvider>\r\n        </Provider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}