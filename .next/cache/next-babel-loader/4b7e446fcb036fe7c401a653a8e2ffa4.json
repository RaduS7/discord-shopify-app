{"ast":null,"code":"var __jsx = React.createElement;\nimport App from 'next/app';\nimport Head from 'next/head';\nimport { AppProvider } from '@shopify/polaris';\nimport { Provider } from '@shopify/app-bridge-react';\nimport '@shopify/polaris/styles.css';\nimport translations from '@shopify/polaris/locales/en.json';\nimport Cookies from 'js-cookie';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport React from 'react'; //TZIGANIE\n\nvar script = document.createElement(\"script\");\nscript.id = \"widgetbotscript\";\nscript.type = \"text/javascript\";\nscript.src = \"https://cdn.jsdelivr.net/npm/@widgetbot/crate@3\";\nscript.text = `\n            var crate = new Crate({\n                server: '${valID}', \n                channel: '${channelID}', \n                location: [\"${desktop ? widgetObj.desktopPosition.yAxis : widgetObj.mobilePosition.yAxis}\", \"${desktop ? widgetObj.desktopPosition.xAxis : widgetObj.mobilePosition.xAxis}\"],                                \n                shard: 'https://e.widgetbot.io',                        \n                color: '${widgetObj.color}',\n                defer: true,                        \n            })\n            //crate.options.color = '#'+Math.random().toString(16).slice(2, 8);                                \n            crate.notify({\n                content: '${widgetObj.notificationText}',\n                timeout: ${widgetObj.notificationTimeout},\n                avatar: '${widgetObj.notificationAvatar}'                        \n              }) \n            `;\nconst client = new ApolloClient({\n  fetchOptions: {\n    credentials: 'include'\n  }\n});\n\nclass MyApp extends App {\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     refreshed: false\n  //   }\n  // }\n  static async getInitialProps(server) {\n    var shopOrigin = server.ctx.query.shop;\n    return {\n      shopOrigin\n    };\n  } // componentDidMount() {\n  //   if (this.state.refreshed) {\n  //     alert(\"MARE RFRESZ QUAESZS\")\n  //     window.location.reload(false);\n  //     this.setState({ refreshed: false })\n  //   }\n  // }\n\n\n  render() {\n    var {\n      Component,\n      pageProps,\n      shopOrigin\n    } = this.props; //console.log(shopOrigin)\n\n    if (Cookies.get(\"shopOrigin\") != undefined) {\n      shopOrigin = Cookies.get(\"shopOrigin\"); //console.log(\"---------\")\n      //console.log(\"Il aveam\")\n      //console.log(\"---------\")\n    } else {\n      Cookies.set(\"shopOrigin\", shopOrigin, {\n        httpOnly: false,\n        secure: true,\n        sameSite: 'none'\n      }); //this.setState({ refreshed: true })\n      //console.log(\"---------\")\n      //console.log(\"L-am setat acum\")\n      //console.log(\"---------\")\n    }\n\n    const config = {\n      apiKey: API_KEY,\n      shopOrigin,\n      forceRedirect: true\n    };\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Discordify\"), __jsx(\"meta\", {\n      charSet: \"utf-8\"\n    })), __jsx(Provider, {\n      config: config\n    }, __jsx(AppProvider, {\n      i18n: translations\n    }, __jsx(ApolloProvider, {\n      client: client\n    }, __jsx(Component, pageProps)))));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["D:/MyProjects/discord-app/pages/_app.js"],"names":["App","Head","AppProvider","Provider","translations","Cookies","ApolloClient","ApolloProvider","React","script","document","createElement","id","type","src","text","valID","channelID","desktop","widgetObj","desktopPosition","yAxis","mobilePosition","xAxis","color","notificationText","notificationTimeout","notificationAvatar","client","fetchOptions","credentials","MyApp","getInitialProps","server","shopOrigin","ctx","query","shop","render","Component","pageProps","props","get","undefined","set","httpOnly","secure","sameSite","config","apiKey","API_KEY","forceRedirect"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,OAAO,6BAAP;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AAEAF,MAAM,CAACG,EAAP,GAAY,iBAAZ;AACAH,MAAM,CAACI,IAAP,GAAc,iBAAd;AACAJ,MAAM,CAACK,GAAP,GAAa,iDAAb;AACAL,MAAM,CAACM,IAAP,GAAe;;2BAEYC,KAAM;4BACLC,SAAU;8BACPC,OAAD,GAAYC,SAAS,CAACC,eAAV,CAA0BC,KAAtC,GAA8CF,SAAS,CAACG,cAAV,CAAyBD,KAAM,OAAOH,OAAD,GAAYC,SAAS,CAACC,eAAV,CAA0BG,KAAtC,GAA8CJ,SAAS,CAACG,cAAV,CAAyBC,KAAM;;0BAEpKJ,SAAS,CAACK,KAAM;;;;;4BAKdL,SAAS,CAACM,gBAAiB;2BAC5BN,SAAS,CAACO,mBAAoB;2BAC9BP,SAAS,CAACQ,kBAAmB;;aAbxD;AAiBA,MAAMC,MAAM,GAAG,IAAItB,YAAJ,CAAiB;AAC9BuB,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD;AADgB,CAAjB,CAAf;;AAMA,MAAMC,KAAN,SAAoB/B,GAApB,CAAwB;AAEtB;AACA;AACA;AACA;AACA;AACA;AAEA,eAAagC,eAAb,CAA6BC,MAA7B,EAAqC;AACnC,QAAIC,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAWC,KAAX,CAAiBC,IAAlC;AACA,WAAO;AAAEH,MAAAA;AAAF,KAAP;AACD,GAZqB,CActB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAG;AACP,QAAI;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,SAAb;AAAwBN,MAAAA;AAAxB,QAAuC,KAAKO,KAAhD,CADO,CAEP;;AACA,QAAIpC,OAAO,CAACqC,GAAR,CAAY,YAAZ,KAA6BC,SAAjC,EAA4C;AAC1CT,MAAAA,UAAU,GAAG7B,OAAO,CAACqC,GAAR,CAAY,YAAZ,CAAb,CAD0C,CAE1C;AACA;AACA;AACD,KALD,MAMK;AACHrC,MAAAA,OAAO,CAACuC,GAAR,CAAY,YAAZ,EAA0BV,UAA1B,EAAsC;AACpCW,QAAAA,QAAQ,EAAE,KAD0B;AAEpCC,QAAAA,MAAM,EAAE,IAF4B;AAGpCC,QAAAA,QAAQ,EAAE;AAH0B,OAAtC,EADG,CAMH;AACA;AACA;AACA;AACD;;AAED,UAAMC,MAAM,GAAG;AAAEC,MAAAA,MAAM,EAAEC,OAAV;AAAmBhB,MAAAA,UAAnB;AAA+BiB,MAAAA,aAAa,EAAE;AAA9C,KAAf;AAEA,WACE,MAAC,KAAD,CAAO,QAAP,QACE,MAAC,IAAD,QACE,kCADF,EAEE;AAAM,MAAA,OAAO,EAAC;AAAd,MAFF,CADF,EAKE,MAAC,QAAD;AAAU,MAAA,MAAM,EAAEH;AAAlB,OACE,MAAC,WAAD;AAAa,MAAA,IAAI,EAAE5C;AAAnB,OACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEwB;AAAxB,OACE,MAAC,SAAD,EAAeY,SAAf,CADF,CADF,CADF,CALF,CADF;AAeD;;AA5DqB;;AA+DxB,eAAeT,KAAf","sourcesContent":["import App from 'next/app';\r\nimport Head from 'next/head';\r\nimport { AppProvider } from '@shopify/polaris';\r\nimport { Provider } from '@shopify/app-bridge-react';\r\nimport '@shopify/polaris/styles.css';\r\nimport translations from '@shopify/polaris/locales/en.json';\r\nimport Cookies from 'js-cookie';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport React from 'react';\r\n\r\n//TZIGANIE\r\nvar script = document.createElement(\"script\");\r\n\r\nscript.id = \"widgetbotscript\"\r\nscript.type = \"text/javascript\";\r\nscript.src = \"https://cdn.jsdelivr.net/npm/@widgetbot/crate@3\";\r\nscript.text = `\r\n            var crate = new Crate({\r\n                server: '${valID}', \r\n                channel: '${channelID}', \r\n                location: [\"${(desktop) ? widgetObj.desktopPosition.yAxis : widgetObj.mobilePosition.yAxis}\", \"${(desktop) ? widgetObj.desktopPosition.xAxis : widgetObj.mobilePosition.xAxis}\"],                                \r\n                shard: 'https://e.widgetbot.io',                        \r\n                color: '${widgetObj.color}',\r\n                defer: true,                        \r\n            })\r\n            //crate.options.color = '#'+Math.random().toString(16).slice(2, 8);                                \r\n            crate.notify({\r\n                content: '${widgetObj.notificationText}',\r\n                timeout: ${widgetObj.notificationTimeout},\r\n                avatar: '${widgetObj.notificationAvatar}'                        \r\n              }) \r\n            `\r\n\r\nconst client = new ApolloClient({\r\n  fetchOptions: {\r\n    credentials: 'include',\r\n  }\r\n});\r\n\r\nclass MyApp extends App {\r\n\r\n  // constructor() {\r\n  //   super()\r\n  //   this.state = {\r\n  //     refreshed: false\r\n  //   }\r\n  // }\r\n\r\n  static async getInitialProps(server) {\r\n    var shopOrigin = server.ctx.query.shop\r\n    return { shopOrigin }\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   if (this.state.refreshed) {\r\n  //     alert(\"MARE RFRESZ QUAESZS\")\r\n  //     window.location.reload(false);\r\n  //     this.setState({ refreshed: false })\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    var { Component, pageProps, shopOrigin } = this.props;\r\n    //console.log(shopOrigin)\r\n    if (Cookies.get(\"shopOrigin\") != undefined) {\r\n      shopOrigin = Cookies.get(\"shopOrigin\")\r\n      //console.log(\"---------\")\r\n      //console.log(\"Il aveam\")\r\n      //console.log(\"---------\")\r\n    }\r\n    else {\r\n      Cookies.set(\"shopOrigin\", shopOrigin, {\r\n        httpOnly: false,\r\n        secure: true,\r\n        sameSite: 'none'\r\n      })\r\n      //this.setState({ refreshed: true })\r\n      //console.log(\"---------\")\r\n      //console.log(\"L-am setat acum\")\r\n      //console.log(\"---------\")\r\n    }\r\n\r\n    const config = { apiKey: API_KEY, shopOrigin, forceRedirect: true };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Head>\r\n          <title>Discordify</title>\r\n          <meta charSet=\"utf-8\" />\r\n        </Head>\r\n        <Provider config={config}>\r\n          <AppProvider i18n={translations}>\r\n            <ApolloProvider client={client}>\r\n              <Component {...pageProps} />\r\n            </ApolloProvider>\r\n          </AppProvider>\r\n        </Provider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n"]},"metadata":{},"sourceType":"module"}